# This file is used by Makefile and declares common build rules,
# a list of common object files etc.
#
# $URL$
# $Id$


# TODO: This file should be restructured and much of it moved
# to module.mk style files.


#######################################################################

TARGETS := \
	decine$(EXEEXT) \
	dekyra$(EXEEXT) \
	descumm$(EXEEXT) \
	desword2$(EXEEXT) \
	degob$(EXEEXT) \
	tools_cli$(EXEEXT) \
	tools_gui$(EXEEXT)

UTILS := \
	common/file.o \
	common/md5.o \
	common/util.o \
	utils/adpcm.o \
	utils/audiostream.o \
	utils/voc.o \
	utils/wave.o

all: $(TARGETS)

install: $(TARGETS)
	for i in $^ ; do install -p -m 0755 $$i $(DESTDIR) ; done

bundle_name = ScummVM\ Tools.app
bundle: $(TARGETS)
	mkdir -p $(bundle_name)
	mkdir -p $(bundle_name)/Contents
	mkdir -p $(bundle_name)/Contents/MacOS
	mkdir -p $(bundle_name)/Contents/Resources
	echo "APPL????" > $(bundle_name)/Contents/PkgInfo
	cp $(srcdir)/dist/macosx/Info.plist $(bundle_name)/Contents/
	cp $(srcdir)/gui/media/*.* $(bundle_name)/Contents/Resources
	cp tools_gui$(EXEEXT) $(bundle_name)/Contents/MacOS/



PROGRAMS = \
	decine \
	dekyra \
	descumm \
	desword2 \
	degob \
	create_sjisfnt \
	tools_gui \
	tools_cli \
	sword2_clue


decine_OBJS := decine.o

dekyra_OBJS := dekyra.o dekyra_v1.o $(UTILS)

descumm_OBJS := descumm-tool.o descumm.o descumm6.o descumm-common.o tool.o $(UTILS)

desword2_OBJS := desword2.o tool.o $(UTILS)

degob_OBJS := \
	degob.o \
	degob_script.o \
	degob_script_v1.o \
	degob_script_v2.o \
	degob_script_v3.o \
	degob_script_v4.o \
	degob_script_v5.o \
	degob_script_v6.o \
	degob_script_bargon.o \
	tool.o \
	$(UTILS)

create_sjisfnt_OBJS := create_sjisfnt.o $(UTILS)
create_sjisfnt_LIBS := `freetype-config --libs` -liconv

tools_gui_OBJS := \
	gui/main.o \
	gui/pages.o \
	gui/gui_tools.o \
	compress_agos.o \
	compress_gob.o \
	compress_kyra.o \
	compress_queen.o \
	compress_saga.o \
	compress_scumm_bun.o \
	compress_scumm_san.o \
	compress_scumm_sou.o \
	compress_sword1.o \
	compress_sword2.o \
	compress_touche.o \
	compress_tucker.o \
	compress_tinsel.o \
	extract_agos.o \
	extract_cine.o \
	extract_gob_stk.o \
	extract_kyra.o \
	extract_loom_tg16.o \
	extract_mm_apple.o \
	extract_mm_c64.o \
	extract_mm_nes.o \
	extract_parallaction.o \
	extract_scumm_mac.o \
	extract_t7g_mac.o \
	encode_dxa.o \
	extract_zak_c64.o \
	kyra_pak.o \
	kyra_ins.o \
	compress.o \
	tool.o \
	tools.o \
	$(UTILS)
tools_gui_LIBS := $(WXLIBS) $(LIBS)

tools_cli_OBJS := \
	main_cli.o \
	tools_cli.o \
	compress_agos.o \
	compress_gob.o \
	compress_kyra.o \
	compress_queen.o \
	compress_saga.o \
	compress_scumm_bun.o \
	compress_scumm_san.o \
	compress_scumm_sou.o \
	compress_sword1.o \
	compress_sword2.o \
	compress_touche.o \
	compress_tucker.o \
	compress_tinsel.o \
	extract_agos.o \
	extract_cine.o \
	extract_gob_stk.o \
	extract_kyra.o \
	extract_loom_tg16.o \
	extract_mm_apple.o \
	extract_mm_c64.o \
	extract_mm_nes.o \
	extract_parallaction.o \
	extract_scumm_mac.o \
	extract_t7g_mac.o \
	encode_dxa.o \
	extract_zak_c64.o \
	kyra_pak.o \
	kyra_ins.o \
	compress.o \
	tool.o \
	tools.o \
	$(UTILS)
tools_cli_LIBS := $(LIBS)

sword2_clue_OBJS := sword2_clue.o
sword2_clue_LIBS := `pkg-config --libs gtk+-2.0`


define PROGRAM_template
$(1)$(EXEEXT): $$($(1)_OBJS)
	$(CXX) $(LDFLAGS) $$($(1)_LIBS) -o $(1)$(EXEEXT) $$($(1)_OBJS)
endef

# Generate build rules for all tools
$(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog))))


clean:
	rm -f $(addsuffix *.o,$(MODULE_DIRS)) $(TARGETS)


# Set custom build flags for various files
gui/main.o: CPPFLAGS+=$(WXINCLUDES)
gui/pages.o: CPPFLAGS+=$(WXINCLUDES)
create_sjisfnt.o: CPPFLAGS+=`pkg-config --cflags gtk+-2.0`
gui/gui_tools.o: CPPFLAGS+=$(WXINCLUDES)
sword2_clue.o: CPPFLAGS+=`pkg-config --cflags gtk+-2.0`


######################################################################
# The build rules follow - normally you should have no need to
# touch whatever comes after here.
######################################################################

# Concat DEFINES and INCLUDES to form the CPPFLAGS
CPPFLAGS := $(DEFINES) $(INCLUDES)

# Include the build instructions for all modules
#-include $(addprefix $(srcdir)/, $(addsuffix /module.mk,$(MODULES)))

# Depdir information
DEPDIRS = $(addsuffix $(DEPDIR),$(MODULE_DIRS))
DEPFILES =

%.o: %.cpp
	$(MKDIR) $(*D)/$(DEPDIR)
	$(CXX) $(NO_MAIN) -Wp,-MMD,"$(*D)/$(DEPDIR)/$(*F).d",-MQ,"$@",-MP $(CXXFLAGS) $(CPPFLAGS) -c $(<) -o $*.o

# Include the dependency tracking files.
-include $(wildcard $(addsuffix /*.d,$(DEPDIRS)))
